name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          DOCKER_REPO: ${{ secrets.DOCKER_REPO}}
          DOCKER_TAG: ${{ secrets.DOCKER_TAG}}
        run: |
          echo "Building Docker image using Dockerfile..."
          docker build -t $DOCKER_REPO/$APP_NAME:$DOCKER_TAG -f Dockerfile .      
          
          echo "Pushing Docker image to Docker Hub..."
          docker push $DOCKER_REPO/$APP_NAME:$DOCKER_TAG 
          
          echo "Listing Docker images to confirm..."
          docker images

      - name: SSH into EC2 and deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DATABASE_TYPE: ${{ secrets.DATABASE_TYPE }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          APP_NAME: ${{ secrets.APP_NAME }}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_REPO }}/{{ secrets.APP_NAME }}:${{ secrets.DOCKER_TAG }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into the EC2 instance and create the .env.prod file
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
          
            # Stop Nginx to free up port 80
            echo "Stopping Nginx..."
            sudo systemctl stop nginx          
          
            # Define and create application directory
            APP_DIR="/home/ubuntu/chat-service"
            cd /home/ubuntu
            sudo mkdir -p chat-service
            sudo chown $EC2_USER:$EC2_USER $APP_DIR
            sudo chmod 777 $APP_DIR

            # Define and create environment directory
            ENV_DIR="$APP_DIR/envs"
            cd $APP_DIR
            sudo mkdir -p envs
            sudo chown $EC2_USER:$EC2_USER $ENV_DIR
            sudo chmod 777 $ENV_DIR

            # Create the .env.prod file with environment variables directly
            echo "Creating .env.prod file..."
            cd $ENV_DIR
            ENV_PROD="$ENV_DIR/.env.prod"
            sudo touch .env.prod
            sudo chown $EC2_USER:$EC2_USER $ENV_PROD
            sudo chmod 777 $ENV_PROD

            echo "writing env.prod file..."
            echo "SERVER_DOMAIN=${SERVER_DOMAIN}" > $ENV_PROD
            echo "SERVER_PORT=${SERVER_PORT}" >> $ENV_PROD
            echo "DATABASE_TYPE=${DATABASE_TYPE}" >> $ENV_PROD
            echo "DATABASE_HOST=${DATABASE_HOST}" >> $ENV_PROD
            echo "DATABASE_PORT=${DATABASE_PORT}" >> $ENV_PROD
            echo "DATABASE_USERNAME=${DATABASE_USERNAME}" >> $ENV_PROD
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> $ENV_PROD
            echo "DATABASE_NAME=${DATABASE_NAME}" >> $ENV_PROD
            echo "CORS_ORIGIN=${CORS_ORIGIN}" >> $ENV_PROD
            echo "JWT_SECRET=${JWT_SECRET}" >> $ENV_PROD

            # Set file permissions to ensure Docker can access it
            sudo chmod 777 $ENV_PROD

            # Pull the latest Docker image
            echo "Pulling Docker image from Docker Hub..."

            # docker pull $DOCKER_PATH
            docker pull s6820w/chat-service:latest
            
            echo "Listing Docker containers..."
            docker ps -a

            # Stop and remove the existing container
            echo "Stopping and removing existing Docker container ..."
            docker stop chat-service || true
            docker rm chat-service || true
          
            echo "remove stop containers"
            docker stop $(docker ps -q)

            echo "remove unnecessary containers"
            docker rm $(docker ps -a -q)

            # Debugging: Print the Docker command to be run
            echo "Docker run command: sudo docker run -d --name chat-service --env-file /home/ubuntu/chat-service/envs/.env.prod s6820w/chat-service:latest"

            # Run the new container with the .env.prod file
            echo "Running new Docker container..."
            #sudo docker run -d --name chat-service --env-file /home/ubuntu/chat-service/envs/.env.prod s6820w/chat-service:latest
            sudo docker run -d --name chat-service \
            -e NODE_ENV=prod \
            -v /home/ubuntu/chat-service/envs/.env.prod:/app/chat-service/envs/.env.prod \
            s6820w/chat-service:latest
          
            # Add debugging steps here
            echo "Debugging: Check environment variables in the container"
            sudo docker exec chat-service env
        
            echo "Debugging: Check if JWT_SECRET is set in the container"
            sudo docker exec chat-service sh -c 'echo $JWT_SECRET'
        
            echo "Debugging: Print the contents of .env.prod file"
            sudo cat /home/ubuntu/chat-service/envs/.env.prod
        
            echo "Debugging: Check Docker logs"
            sudo docker logs chat-service          
        
            # Wait a few seconds to ensure the Docker container is fully started
            sleep 10
          
            # Restart Nginx after the Docker container has started
            echo "Starting Nginx..."
            sudo systemctl start nginx
            sudo systemctl status nginx
          
          EOF
          
          # Clean up sensitive files
          rm private_key.pem
