name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          DOCKER_REPO: ${{ secrets.DOCKER_REPO}}
        run: |
          echo "Building Docker image..."
          docker build -t $APP_NAME:${{ github.sha }} .
          
          echo "Tagging Docker image..."
          docker tag $APP_NAME:${{ github.sha }} $DOCKER_REPO/$APP_NAME:latest
          
          echo "Pushing Docker image to Docker Hub..."
          docker push $DOCKER_REPO/$APP_NAME:latest 
          
          echo "Listing Docker images to confirm..."
          docker images

#      - name: SSH into EC2 and deploy
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#          EC2_USER: ${{ secrets.EC2_USER }}
#          DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
#        run: |
#          echo "$SSH_PRIVATE_KEY" > private_key.pem
#          chmod 600 private_key.pem
#
#          # SSH into the EC2 instance and deploy the Docker container
#          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
#            sudo mkdir -p envs
#            sudo chown $EC2_USER:$EC2_USER envs  # Ensure the user owns the directory
#
#            # verify .env.prod file
#            ls -la envs
#
#            # Set file permissions
#            # sudo chmod 777 envs
#
#            # Retrieve secrets from AWS SSM Parameter Store and create .env.prod
#            echo "Fetching secrets from AWS SSM Parameter Store..."
#            echo "SERVER_DOMAIN=\$(aws ssm get-parameter --name "/chat-service/production/SERVER_DOMAIN" --query Parameter.Value --output text)" > envs/.env.prod
#            echo "SERVER_PORT=\$(aws ssm get-parameter --name "/chat-service/production/SERVER_PORT" --query Parameter.Value --output text)" >> envs/.env.prod
#
#            echo "DATABASE_TYPE=\$(aws ssm get-parameter --name "/chat-service/production/DATABASE_TYPE" --query Parameter.Value --output text)" >> envs/.env.prod
#            echo "DATABASE_HOST=\$(aws ssm get-parameter --name "/chat-service/production/DATABASE_HOST" --query Parameter.Value --output text)" >> envs/.env.prod
#            echo "DATABASE_PORT=\$(aws ssm get-parameter --name "/chat-service/production/DATABASE_PORT" --query Parameter.Value --output text)" >> envs/.env.prod
#            echo "DATABASE_USERNAME=\$(aws ssm get-parameter --name "/chat-service/production/DATABASE_USERNAME" --with-decryption --query Parameter.Value --output text)" >> envs/.env.prod
#            echo "DATABASE_PASSWORD=\$(aws ssm get-parameter --name "/chat-service/production/DATABASE_PASSWORD" --with-decryption --query Parameter.Value --output text)" >> envs/.env.prod
#            echo "DATABASE_NAME=\$(aws ssm get-parameter --name "/chat-service/production/DATABASE_NAME" --query Parameter.Value --output text)" >> envs/.env.prod
#
#            # Set file permissions
#            sudo chmod 777 envs/.env.prod
#
#            # Pull the latest Docker image
#            echo "Pulling Docker image from Docker Hub..."
#            docker pull $DOCKER_REPO/$APP_NAME:latest
#
#            echo "Listing Docker containers..."
#            docker ps -a
#
#            # Stop and remove the existing container
#            echo "Stopping and removing existing Docker container (if any)..."
#            docker stop chat-service || true
#            docker rm chat-service || true
#
#            # Run the new container with the .env.prod file
#            echo "Running new Docker container..."
#            sudo docker run -d --name chat-service --env-file envs/.env.prod -p 3000:3000 $DOCKER_REPO/$APP_NAME:latest
#          EOF
#
#          # Clean up sensitive files
#          rm private_key.pem

      - name: SSH into EC2 and deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          APP_NAME: ${{ secrets.APP_NAME }}
          ENV_PROD: ${{ secrets.ENV_PROD }}
          DOCKER_REPO: ${{ secrets.DOCKER_REPO}}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Verify the values of environment variables
          echo "APP_NAME is: $APP_NAME"
          echo "DOCKER_REPO is: $DOCKER_REPO"
          
          # Copy the .env.prod file to the EC2 instance
          echo "$ENV_PROD" > .env.prod
          scp -o StrictHostKeyChecking=no -i private_key.pem .env.prod $EC2_USER@$EC2_HOST:/home/$EC2_USER/$APP_NAME/envs/.env.prod
          
          # Ensure the envs directory exists
          mkdir -p envs
          
          # List files to verify that .env.prod was created
          echo "Listing files in envs directory to verify .env.prod existence:"
          ls -la envs/
          
          # current working directory
          echo "Current working directory"
          pwd
          
          # verify .env.prod file existence
          #cd envs
          #if [ -f envs/.env.prod ]; then
           #echo ".env.prod file exists."
           #chmod 755 envs/.env.prod
           #cat envs/.env.prod   # Optional: Show the contents of the file for verification
          #else
           #echo "Error: .env.prod file does not exist."
           #exit 1  # Exit with an error code to fail the workflow
           #fi


          # Ensure the envs directory exists
          # ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "mkdir -p /home/$EC2_USER/$APP_NAME/envs"

          # Set permissions to ensure Docker can access the file
          # echo "Setting permissions on .env.prod..."
          # ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "chmod 644 /home/$EC2_USER/$APP_NAME/envs/.env.prod"

          # List files to verify that .env.prod was created
          # echo "Listing files in envs directory to verify .env.prod existence:"
          # ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST "ls -la /home/$EC2_USER/$APP_NAME/envs/"

          # SSH into the EC2 instance and deploy the Docker container
          #cd ..
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/$EC2_USER/$APP_NAME

            # Pull the latest Docker image
            FULL_IMAGE_REFERENCE="$DOCKER_REPO/$APP_NAME:latest"
            echo "Full image reference: $FULL_IMAGE_REFERENCE"
            docker pull $DOCKER_REPO/$APP_NAME:latest

            echo "Pulling Docker image from Docker Hub..."
            docker pull $FULL_IMAGE_REFERENCE

            echo "Listing Docker containers..."
            docker ps -a

            # Stop and remove the existing container
            echo "Stopping and removing existing Docker container (if any)..."
            docker stop chat-service || true
            docker rm chat-service || true

            # Run the new container with the .env.prod file
            echo "Running new Docker container..."
            sudo docker run -d --name $APP_NAME --env-file envs/.env.prod -p 3000:3000 $DOCKER_REPO/$APP_NAME:latest
          EOF
          
          # Clean up sensitive files
          rm private_key.pem
          
          
          
          # Set permissions to ensure Docker can access the file
           # echo "Setting permissions on .env.prod..."
           # chmod 777 envs/.env.prod
           #chmod 755 envs



          # SSH into the EC2 instance and deploy the Docker container
          # cd ..
          # ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # cd /home/$EC2_USER/$APP_NAME

            # Pull the latest Docker image
            # docker pull $DOCKER_REPO/$APP_NAME:latest

            # echo "Listing Docker containers..."
            # docker ps -a

            # Stop and remove the existing container
            # echo "Stopping and removing existing Docker container (if any)..."
            # docker stop chat-service || true
            # docker rm chat-service || true

            # Run the new container with the .env.prod file
             # echo "Running new Docker container..."
             # sudo docker run -d --name $APP_NAME --env-file envs/.env.prod -p 3000:3000 $DOCKER_REPO/$APP_NAME:latest
          # EOF

          # Clean up sensitive files
          # rm private_key.pem


#      - name: SSH into EC2 and deploy
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#          EC2_USER: ${{ secrets.EC2_USER }}
#          APP_NAME: ${{ secrets.APP_NAME }}
#          ENV_PROD: ${{ secrets.ENV_PROD }}
#          DOCKER_REPO: ${{ secrets.DOCKER_REPO}}
#        run: |
#          echo "$SSH_PRIVATE_KEY" > private_key.pem
#          chmod 600 private_key.pem
#
#          # Copy the .env.prod file to the EC2 instance
#          echo "$ENV_PROD" > .env.prod
#          scp -o StrictHostKeyChecking=no -i private_key.pem .env.prod $EC2_USER@$EC2_HOST:/home/$EC2_USER/$APP_NAME/.env.prod
#
#
#          # SSH into the EC2 instance and deploy the Docker container
#          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
#            cd /home/$EC2_USER/$APP_NAME
#
#            # Pull the latest Docker image
#            docker pull $DOCKER_REPO/$APP_NAME:latest
#
#            # Stop and remove the existing container
#            docker stop $APP_NAME || true
#            docker rm $APP_NAME || true
#
#            # Run the new container with the .env.prod file
#            docker run -d --name $APP_NAME --env-file .env.prod -p 3000:3000 $DOCKER_REPO/$APP_NAME:latest
#          EOF
#
#          # Clean up sensitive files
#          rm private_key.pem

#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20'

#      - name: preinstall dependencies
#        run: rm -rf node_modules

#      - name: Install dependencies
#        run: npm ci

#      - name: Verify node_modules presence (Debugging Step)
#        run: ls -la node_modules

#      - name: build typescript
#        run: tsc --build --clean tsconfig.build.json

#      - name: Verify files
#        run: ls -la

#      - name: verify current path
#        run: pwd

#      - name: Deploy to EC2
#        env:
#          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#          EC2_USER: ${{ secrets.EC2_USER }}
#          ENV_PROD: ${{ secrets.ENV_PROD }}
#          APP_NAME: ${{ secrets.APP_NAME }}
#        run: |
#          echo "$SSH_PRIVATE_KEY" > private_key.pem
#          chmod 600 private_key.pem
#          echo "$ENV_PROD" > .env.prod
#
#
#          scp -o StrictHostKeyChecking=no -i private_key.pem .env.prod $EC2_USER@$EC2_HOST:/home/$EC2_USER/$APP_NAME/.env.prod
#
#          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
#            cd /home/$EC2_USER/$APP_NAME
#            npm ci --production --omit=dev
#            pm2 stop chat-service || true
#            pm2 start npm --name "$APP_NAME" -- run start:prod
#          EOF
#          rm private_key.pem
#          rm .env.prod

#      - name: verify dist
#        run: ls -la dist
