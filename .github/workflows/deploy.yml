name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          DOCKER_REPO: ${{ secrets.DOCKER_REPO}}
          DOCKER_VERSION: ${{ secrets.DOCKER_VERSION}}
        run: |
          echo "Building Docker image..."
          docker build -t $APP_NAME:${{ github.sha }} .
          
          echo "Tagging Docker image..."
          docker tag $APP_NAME:${{ github.sha }} $DOCKER_REPO/$APP_NAME:$DOCKER_VERSION
          
          echo "Pushing Docker image to Docker Hub..."
          docker push $DOCKER_REPO/$APP_NAME:$DOCKER_VERSION 
          
          echo "Listing Docker images to confirm..."
          docker images

      - name: SSH into EC2 and deploy
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
          SERVER_DOMAIN: ${{ secrets.SERVER_DOMAIN }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DATABASE_TYPE: ${{ secrets.DATABASE_TYPE }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          APP_NAME: ${{ secrets.APP_NAME }}
          DOCKER_VERSION: ${{ secrets.DOCKER_VERSION}}
          CORS_ORIGIN: ${{ secrets.CORS_ORIGIN}}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          echo "chmod .pem"
          
          # SSH into the EC2 instance and create the .env.prod file
          ssh -v -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            # echo "ssh -v -"
          
            # Define variables for paths
            APP_DIR="/home/$EC2_USER/$APP_NAME"

            # Ensure the application directory exists
            echo "Creating application directory at $APP_DIR..."
            sudo mkdir -p $APP_DIR
            sudo chown $EC2_USER:$EC2_USER $APP_DIR
            sudo chmod 644 $APP_DIR            

            # Ensure the envs directory exists and set permissions
            echo "Creating 'envs' directory..."
            ENV_DIR="$APP_DIR/envs"
            sudo mkdir -p $ENV_DIR
            sudo chown $EC2_USER:$EC2_USER $ENV_DIR
            sudo chmod 777 $ENV_DIR
            
          
            # Create the .env.prod file with environment variables directly
            echo "Creating .env.prod file..."                        
            sudo touch $ENV_DIR/.env.prod
            sudo chown $EC2_USER:$EC2_USER $ENV_DIR/.env.prod
            sudo chmod 644 $ENV_DIR/.env.prod          
          
            # Verify env files
            echo "Checking env files from the env directory"
            ls -la $ENV_DIR/
          
            echo "SERVER_DOMAIN=${SERVER_DOMAIN}" > $ENV_DIR/.env.prod
            echo "SERVER_PORT=${SERVER_PORT}" >> $ENV_DIR/.env.prod
            echo "DATABASE_TYPE=${DATABASE_TYPE}" >> $ENV_DIR/.env.prod
            echo "DATABASE_HOST=${DATABASE_HOST}" >> $ENV_DIR/.env.prod
            echo "DATABASE_PORT=${DATABASE_PORT}" >> $ENV_DIR/.env.prod
            echo "DATABASE_USERNAME=${DATABASE_USERNAME}" >> $ENV_DIR/.env.prod
            echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> $ENV_DIR/.env.prod
            echo "DATABASE_NAME=${DATABASE_NAME}" >> $ENV_DIR/.env.prod
            echo "CORS_ORIGIN=${CORS_ORIGIN}" >> $ENV_DIR/.env.prod
          
            cat $ENV_DIR/.env.prod
          
            # Set file permissions to ensure Docker can access it
            sudo chmod 600 $ENV_DIR/.env.prod

            # Pull the latest Docker image
            echo "Pulling Docker image from Docker Hub..."
            DOCKER_PATH="$DOCKER_REPO/$APP_NAME:$DOCKER_VERSION"
            
            # Define variables for paths
            echo "$DOCKER_PATH docker path"
            
            # docker pull $DOCKER_PATH
            docker pull $DOCKER_PATH

            echo "Listing Docker containers..."
            docker ps -a

            # Stop and remove the existing container
            echo "Stopping and removing existing Docker container ..."
            docker stop $APP_NAME || true
            docker rm $APP_NAME || true

            # Debugging: Print the Docker command to be run
            echo "Docker run command: sudo docker run -d --name $APP_NAME --env-file envs/.env.prod -p 3000:3000 $DOCKER_PATH"            
          
            # Run the new container with the .env.prod file
            echo "Running new Docker container..."
            sudo docker run -d --name $APP_NAME --env-file envs/.env.prod -p 3000:3000 $DOCKER_PATH
          EOF


          # Clean up sensitive files
          rm private_key.pem
