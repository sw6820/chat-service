config:
  target: 'https://api.stahc.uk'  # Your server address
  phases:
    - name: "Warm up"
      duration: 30
      arrivalRate: 2
      rampTo: 5
    - name: "Normal load"
      duration: 60
      arrivalRate: 5
      rampTo: 10
    - name: "Peak load"
      duration: 30
      arrivalRate: 10
      rampTo: 15
    # - duration: 60  # Test duration in seconds
    #   arrivalRate: 5  # 5 users per second
  processor: "./processor.mjs"  # We'll create this to handle JSON data
  defaults:
    headers:
      Content-Type: "application/json"
  ws:
    # WebSocket endpoint
    url: "wss://api.stahc.uk/chat"
    subProtocols: ["socket.io"]

scenarios:
  - name: "Chat room and messaging flow"
    beforeScenario: "loadUserData"  # Custom function to load JSON data
    flow:
      # 2. Initialize WebSocket connection
      - connect:
          engine: "socketio"
          namespace: "/chat"
          auth:
            token: "{{ socketToken }}"      

      # 1. Create or find a chat room
      - post:
          url: "/rooms/find-or-create"  # First create or find a room
          headers:
            Authorization: "{{ token }}"
          json:
            friendId: "{{ $randomNumber(1,2) }}"  # Assuming friend ID for testing
          capture:
            - json: "$.roomId"
              as: "roomId"    
          expect:
            - statusCode: 200

      # 3. Join chat room (WebSocket)
      - emit:
          channel: "joinRoom"
          data:
            roomId: "{{ roomId }}"
          expect:
            - "joinedRoom"

      # 4. Send messages (WebSocket)
      - emit:
          channel: "sendMessage"
          data:
            userId: "{{ userId }}"
            roomId: "{{ roomId }}"
            content: "Hello from user {{ userId }}"
          expect:
            - "newMessage"

      # 5. Send longer message
      - think: 2
      - emit:
          channel: "sendMessage"
          data:
            userId: "{{ userId }}"
            roomId: "{{ roomId }}"
            content: "This is a longer test message to verify handling of extended content"
          expect:
            - "newMessage"

      # 6. Rapid message sequence
      - loop:
          - emit:
              channel: "sendMessage"
              data:
                userId: "{{ userId }}"
                roomId: "{{ roomId }}"
                content: "Quick message {{ $loopCount }}"
              expect:
                - "newMessage"
          - think: 0.5
        count: 5

      # # 2. Join the chat room
      # - post:
      #     url: "/rooms/{{ roomId }}/join"
      #     headers:
      #       Authorization: "Bearer {{ token }}"
      #     json:
      #       userId: "{{ userId }}"
      #     expect:
      #       - statusCode: 200

      # 3. Load chat history before sending messages
      - get:
          url: "/chat/rooms/{{ roomId }}/logs"
          headers:
            Authorization: "{{ token }}"
          expect:
            - statusCode: 200

      # 8. Leave room (WebSocket)
      - emit:
          channel: "leaveRoom"
          data:
            roomId: "{{ roomId }}"
          expect:
            - "leftRoom"

      # 9. Disconnect WebSocket
      - disconnect: {}            

  - name: "History retrieval flow"
    beforeScenario: "loadUserData"
    flow:
      # Only REST API tests for history
      - post:
          url: "/rooms/find-or-create"
          headers:
            Authorization: "{{ token }}"
          json:
            friendId: "{{ $randomNumber(1,10) }}"
          capture:
            - json: "$.roomId"
              as: "roomId"

      - loop:
          - get:
              url: "/chat/rooms/{{ roomId }}/logs"
              headers:
                Authorization: "{{ token }}"
              expect:
                - statusCode: 200
          - think: 2
        count: 3